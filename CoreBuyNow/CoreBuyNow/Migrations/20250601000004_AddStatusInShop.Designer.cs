// <auto-generated />
using System;
using CoreBuyNow.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreBuyNow.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250601000004_AddStatusInShop")]
    partial class AddStatusInShop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Bill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ItemInCartId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ShippingVoucherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShopVoucherId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("char(36)");

                    b.HasKey("BillId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(2005)
                        .HasColumnType("varchar(2005)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.PrimitiveCollection<string>("Vector")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.CustomerInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPurchase")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId1")
                        .HasColumnType("char(36)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerInteractions");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Interaction", b =>
                {
                    b.Property<Guid>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("InteractionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ItemInBill", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ItemId");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("ItemInBills");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ItemInCart", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ItemInCarts");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("ExtraImage")
                        .HasColumnType("longtext");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<bool>("IsFlashSale")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<string>("MainImage")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("Vector")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("ProductId");

                    b.HasIndex("ShopId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AttributeId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Shop", b =>
                {
                    b.Property<Guid>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ShopId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategoryAttribute", b =>
                {
                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("char(36)");

                    b.HasKey("SubcategoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("SubCategoryAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("char(36)");

                    b.HasKey("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsIssued")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PerUserQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("VoucherId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ShopId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.VoucherWallet", b =>
                {
                    b.Property<Guid>("VoucherWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("char(36)");

                    b.HasKey("VoucherWalletId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherWallets");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("WalletId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Admin", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Bill", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Comment", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Customer", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("CoreBuyNow.Models.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.CustomerInteraction", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Interaction", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", null)
                        .WithMany("Interactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CoreBuyNow.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ItemInBill", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Bill", "Bill")
                        .WithMany("Items")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ItemInCart", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Product", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Shop", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Account", "Account")
                        .WithOne("Shop")
                        .HasForeignKey("CoreBuyNow.Models.Entities.Shop", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategoryAttribute", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("SubCategoriesAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.SubCategory", "SubCategory")
                        .WithMany("SubCategoriesAttributes")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Transaction", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Voucher", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoreBuyNow.Models.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Admin");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.VoucherWallet", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Wallet", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("CoreBuyNow.Models.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Bill", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Customer", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ProductAttribute", b =>
                {
                    b.Navigation("SubCategoriesAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.Navigation("SubCategoriesAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
