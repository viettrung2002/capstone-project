// <auto-generated />
using System;
using CoreBuyNow.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreBuyNow.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250417153120_AddCategory")]
    partial class AddCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(2005)
                        .HasColumnType("varchar(2005)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AttributeId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Shop", b =>
                {
                    b.Property<Guid>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ShopId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategoryAttribute", b =>
                {
                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductAttributeAttributeId")
                        .HasColumnType("char(36)");

                    b.HasKey("SubcategoryId", "AttributeId");

                    b.HasIndex("ProductAttributeAttributeId");

                    b.ToTable("SubCategoryAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Customer", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("CoreBuyNow.Models.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Shop", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Account", "Account")
                        .WithOne("Shop")
                        .HasForeignKey("CoreBuyNow.Models.Entities.Shop", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategoryAttribute", b =>
                {
                    b.HasOne("CoreBuyNow.Models.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("SubCategoriesAttributes")
                        .HasForeignKey("ProductAttributeAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBuyNow.Models.Entities.SubCategory", "SubCategory")
                        .WithMany("SubCategoriesAttributes")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.ProductAttribute", b =>
                {
                    b.Navigation("SubCategoriesAttributes");
                });

            modelBuilder.Entity("CoreBuyNow.Models.Entities.SubCategory", b =>
                {
                    b.Navigation("SubCategoriesAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
